{"version":3,"sources":["webpack://personal-website/./src/pages/resources.js"],"names":["StyledMainContainer","styled","theme","mixins","flexBetween","StyledGrid","resetList","StyledResource","boxShadow","location","resources","data","allMarkdownRemark","edges","title","className","length","map","i","frontmatter","node","description","slug","date","key","Link","to"],"mappings":"4LASMA,EAAsBC,qBAAH,yEAAGA,CAAH,6FAOnB,qBAAGC,MAAkBC,OAAOC,eAK5BC,EAAaJ,mBAAH,gEAAGA,CAAH,sNACZ,qBAAGC,MAAkBC,OAAOG,aAW1BC,EAAiBN,mBAAH,oEAAGA,CAAH,kpCAmBd,qBAAGC,MAAkBC,OAAOK,aAC5B,qBAAGN,MAAkBC,OAAOC,eAiB5B,qBAAGF,MAAkBC,OAAOC,eA2HlC,UA3DqB,SAAC,GAAwB,IAAtBK,EAAqB,EAArBA,SAChBC,EADqC,EAAXC,KACTC,kBAAkBC,MAEzC,OACE,gBAAC,KAAD,CAAQJ,SAAUA,GAChB,gBAAC,IAAD,CAAQK,MAAM,cAEd,gBAACd,EAAD,KACE,8BACE,sBAAIe,UAAU,eAAd,aACA,qBAAGA,UAAU,YAAb,oDAGF,gBAACV,EAAD,KACGK,EAAUM,OAAS,GAClBN,EAAUO,KAAI,WAAWC,GAAO,IACtBC,EADqB,EAAdC,KACPD,YACAL,EAAmCK,EAAnCL,MAAOO,EAA4BF,EAA5BE,YAAaC,EAAeH,EAAfG,KAAMC,EAASJ,EAATI,KAElC,OACE,gBAAChB,EAAD,CAAgBiB,IAAKN,GACnB,uBAAKH,UAAU,mBACb,8BACE,uBAAKA,UAAU,kBACb,gBAAC,KAAD,OAEF,sBAAIA,UAAU,mBACZ,gBAAC,EAAAU,KAAD,CAAMC,GAAIJ,GAAOR,IAEnB,qBAAGC,UAAU,kBAAkBM,IAGjC,8BACE,wBAAMN,UAAU,kBAAkBQ","file":"component---src-pages-resources-js-3e281bdf9d843638b72f.js","sourcesContent":["import React from 'react';\nimport { graphql, Link } from 'gatsby';\n// import kebabCase from 'lodash/kebabCase';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { Layout } from '@components';\nimport { IconBookmark } from '@components/icons';\n\nconst StyledMainContainer = styled.main`\n  & > header {\n    margin-bottom: 100px;\n    text-align: left;\n  }\n\n  footer {\n    ${({ theme }) => theme.mixins.flexBetween};\n    width: 100%;\n    margin-top: 20px;\n  }\n`;\nconst StyledGrid = styled.ul`\n  ${({ theme }) => theme.mixins.resetList};\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  grid-gap: 15px;\n  margin-top: 50px;\n  position: relative;\n\n  @media (max-width: 1080px) {\n    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  }\n`;\nconst StyledResource = styled.li`\n  transition: var(--transition);\n  cursor: default;\n\n  @media (prefers-reduced-motion: no-preference) {\n    &:hover,\n    &:focus-within {\n      .resource__inner {\n        transform: translateY(-7px);\n      }\n    }\n  }\n\n  a {\n    position: relative;\n    z-index: 1;\n  }\n\n  .resource__inner {\n    ${({ theme }) => theme.mixins.boxShadow};\n    ${({ theme }) => theme.mixins.flexBetween};\n    flex-direction: column;\n    align-items: flex-start;\n    position: relative;\n    height: 100%;\n    padding: 2rem 1.75rem;\n    border-radius: var(--border-radius);\n    transition: var(--transition);\n    background-color: var(--light-bg-color);\n\n    header,\n    a {\n      width: 100%;\n    }\n  }\n\n  .resource__icon {\n    ${({ theme }) => theme.mixins.flexBetween};\n    color: var(--primary-color);\n    margin-bottom: 30px;\n    margin-left: -5px;\n\n    svg {\n      width: 40px;\n      height: 40px;\n    }\n  }\n\n  .resource__title {\n    margin: 0 0 10px;\n    color: var(--lightest-text-color);\n    font-size: var(--fz-xxl);\n\n    a {\n      position: static;\n\n      &:before {\n        content: '';\n        display: block;\n        position: absolute;\n        z-index: 0;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        left: 0;\n      }\n    }\n  }\n\n  .resource__desc {\n    color: var(--light-text-color);\n    font-size: 17px;\n  }\n\n  .resource__date {\n    color: var(--light-text-color);\n    font-family: var(--font-mono);\n    font-size: var(--fz-xxs);\n  }\n\n  ul.resource__tags {\n    display: flex;\n    align-items: flex-end;\n    flex-wrap: wrap;\n    padding: 0;\n    margin: 0;\n    list-style: none;\n\n    li {\n      color: var(--primary-color);\n      font-family: var(--font-mono);\n      font-size: var(--fz-xxs);\n      line-height: 1.75;\n\n      &:not(:last-of-type) {\n        margin-right: 15px;\n      }\n    }\n  }\n`;\n\nconst ResourcePage = ({ location, data }) => {\n  const resources = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout location={location}>\n      <Helmet title=\"Resources\" />\n\n      <StyledMainContainer>\n        <header>\n          <h1 className=\"big-heading\">Resources</h1>\n          <p className=\"subtitle\">A collection of helpful files from past courses</p>\n        </header>\n\n        <StyledGrid>\n          {resources.length > 0 &&\n            resources.map(({ node }, i) => {\n              const { frontmatter } = node;\n              const { title, description, slug, date } = frontmatter;\n\n              return (\n                <StyledResource key={i}>\n                  <div className=\"resource__inner\">\n                    <header>\n                      <div className=\"resource__icon\">\n                        <IconBookmark />\n                      </div>\n                      <h5 className=\"resource__title\">\n                        <Link to={slug}>{title}</Link>\n                      </h5>\n                      <p className=\"resource__desc\">{description}</p>\n                    </header>\n\n                    <footer>\n                      <span className=\"resource__date\">{date}</span>\n                      {/* <ul className=\"resource__tags\">\n                        {tags.map((tag, i) => (\n                          <li key={i}>\n                            <Link to={`/pensieve/tags/${kebabCase(tag)}/`} className=\"inline-link\">\n                              #{tag}\n                            </Link>\n                          </li>\n                        ))}\n                      </ul> */}\n                    </footer>\n                  </div>\n                </StyledResource>\n              );\n            })}\n        </StyledGrid>\n      </StyledMainContainer>\n    </Layout>\n  );\n};\n\nResourcePage.propTypes = {\n  location: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n};\n\nexport default ResourcePage;\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/resources/\" } }\n      sort: { fields: [frontmatter___title], order: ASC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            description\n            slug\n            date\n            tags\n          }\n          html\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}